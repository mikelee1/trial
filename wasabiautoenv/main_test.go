package main_test

import (
	"bytes"
	"encoding/json"
	"fmt"
	"github.com/op/go-logging"
	"io/ioutil"
	"myproj/try/common/file"
	logger2 "myproj/try/common/logger"
	"myproj/try/wasabiautoenv/models"
	"myproj/try/wasabiautoenv/ssh"
	"net/http"
	"os"
	"testing"
	"time"
)

var (
	logger         *logging.Logger
	inviteCodeFile = "./invitecode"
	baas1          = "baas1"
	baas2          = "baas2"
	baas1Host      = "192.168.9.83"
	baas2Host      = "192.168.9.82"
)

func init() {
	logger = logger2.GetLogger()
}

func Test_Setup(t *testing.T) {
	org := baas1
	peers := []models.PeerPorts{
		models.PeerPorts{
			Main:      30031,
			Chaincode: 30032,
		},
		models.PeerPorts{
			Main:      30033,
			Chaincode: 30034,
		},
	}
	orderer0 := models.OrdererPorts{
		Main: 30020,
	}
	orderer1 := models.OrdererPorts{
		Main: 30022,
	}
	orderer2 := models.OrdererPorts{
		Main: 30024,
	}
	SetupRequest := models.SetupRequest{
		OrgName:      org,
		PeerPorts:    peers,
		OrdererPorts: []models.OrdererPorts{orderer0, orderer1, orderer2},
		Consensus:    "etcdraft",
	}

	data, err := json.Marshal(SetupRequest)
	if err != nil {
		panic(err)
	}

	wrt := bytes.NewBuffer(data)

	resp, err := http.Post("http://"+baas1Host+":8081/member/setup", "application/json", wrt)

	if err != nil {
		panic(err)
	}
	ret, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		panic(err)
	}
	fmt.Println(string(ret))
	//time.Sleep(50*time.Second)
}

func Test_Main(t *testing.T) {
	Test_CreateIdentity(t)
	time.Sleep(time.Minute)
	Test_ScpIdentity(t)
	Test_Invite(t)
	Test_AgreeInvitation(t)
	Test_InviteCode(t)
	Test_Join(t)
}

func Test_CreateIdentity(t *testing.T) {
	host1 := "http://" + baas2Host + ":8081/member/id"
	ciRequest := models.SetupRequest{
		Consensus: "etcdraft",
		PeerPorts: []models.PeerPorts{
			models.PeerPorts{
				Main:      30031,
				Chaincode: 30032,
			},
		},
		Company:            baas2,
		AutoGeneratedCerts: true,
	}
	data, err := json.Marshal(ciRequest)
	if err != nil {
		panic(err)
	}

	wrt := bytes.NewBuffer(data)

	resp, err := http.Post(host1, "application/json", wrt)

	if err != nil {
		panic(err)
	}
	ret, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		panic(err)
	}
	fmt.Println(string(ret))
}

func Test_ScpIdentity(t *testing.T) {
	sc := ssh.NewSshClient(baas2Host)
	stdout, _, _, err := sc.Run("cd /home/centos/go/src/wasabi && ./getidentity.sh")
	if err != nil {
		logger.Error(err)
		return
	}
	//创建获取命令输出管
	logger.Info(string(stdout))

	sc = ssh.NewSshClient(baas1Host)
	stdout, _, _, err = sc.Run(fmt.Sprintf("cd /home/centos/go/src/wasabi && "+
		"docker exec wasabi mkdir -p /wasabi/%s && "+
		"docker cp identity wasabi:/wasabi/%s", baas2, baas2),
	)
	if err != nil {
		logger.Error(err)
		return
	}
	//创建获取命令输出管
	logger.Info(string(stdout))
}

func Test_Invite(t *testing.T) {
	resp, err := http.Get("http://" + baas1Host + ":8081/member/invitation/start?inviter=" + baas1 + "&invitee=" + baas2)

	if err != nil {
		panic(err)
	}
	ret, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		panic(err)
	}
	fmt.Println(string(ret))
}

func Test_AgreeInvitation(t *testing.T) {
	resp, err := http.Get("http://" + baas1Host + ":8081/member/invitation/vote?inviter=" + baas1 + "&invitee=" + baas2 + "&accept=true")
	if err != nil {
		t.Fatal(err)
	}
	data, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		t.Fatal(err)
	}
	fmt.Println(string(data))
}

func Test_InviteCode(t *testing.T) {
	dir, _ := os.Getwd()
	logger.Info(dir)
	resp, err := http.Get("http://" + baas1Host + ":8081/member/ic")
	if err != nil {
		t.Fatal(err)
	}
	defer resp.Body.Close()
	inviteCode, _ := ioutil.ReadAll(resp.Body)
	var f *os.File
	if file.CheckFileIsExist(inviteCodeFile) { //如果文件存在
		f, err = os.OpenFile(inviteCodeFile, os.O_TRUNC|os.O_WRONLY, 0666) //打开文件
	} else {
		f, err = os.Create(inviteCodeFile) //创建文件
	}

	if err != nil {
		logger.Error(err)
		return
	}
	defer f.Close()
	f.WriteString(string(inviteCode))
}

func Test_Join(t *testing.T) {
	data, err := ioutil.ReadFile(inviteCodeFile)
	if err != nil {
		t.Fatal(err)
	}
	wrt := bytes.NewBuffer(data)

	resp, err := http.Post("http://"+baas2Host+":8081/member/join", "application/json", wrt)

	if err != nil {
		t.Fatal(err)
	}
	ret, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(string(ret))
}
