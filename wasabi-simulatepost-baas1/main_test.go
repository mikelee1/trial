package main_test

import (
	"testing"
	"github.com/op/go-logging"
	"encoding/json"
	"bytes"
	"net/http"
	"io/ioutil"
	types2 "myproj/try/wasabi-simulatepost-baas1/types"
	"fmt"
	"time"
)

var lresp = types2.LoginResp{}
var baas1 = "192.168.9.87"
var baas2 = "192.168.9.82"
var inviterstr, inviteestr = "baas1", "baas2"
//阿里云环境
//var inviterstr, inviteestr = "baas3", "baas4"
//var baas1 = "123.57.213.125"
//var baas2 = "47.115.132.208"

//浙江拍阿里云环境
//var inviterstr, inviteestr = "baas1", "baas2"
//var baas1 = "47.114.61.216"
//var baas2 = "47.96.137.8"


var informResp = types2.InformResp{}
var inviteCode []byte
var inviter, invitee = baas1, baas2

var logger *logging.Logger

func init() {
	logger = logging.MustGetLogger("simulatepost")
}

//------内网setup\生成identity-----
func Test_init(t *testing.T) {
	time.Now()
	//Login(inviter)
	//Setup(inviter)
	Login(invitee)
	createIdentity(invitee)
}

//------内网邀请-----
func Test_invite(t *testing.T) {
	Login(inviter)
	createInvite(inviterstr, inviteestr, inviter)
	Login(inviter)
	for {
		err := getInformList(inviter)
		if err == nil {
			break
		}
		time.Sleep(time.Second)
	}
	operateInform(inviter)

	Login(inviter)
	getMemberIC(inviter)
	Login(invitee)
	memberJoin(invitee)
}

func Login(ip string) {
	l := types2.LoginReq{
		Username: "admin",
		Password: "yunphant",
	}
	lb, _ := json.Marshal(l)
	resp, err := http.Post(fmt.Sprintf("http://%s:8081/login", ip), "application/json", bytes.NewBuffer(lb))

	if err != nil {
		logger.Info(err)
		panic(err)
	}
	defer resp.Body.Close()
	body, _ := ioutil.ReadAll(resp.Body)

	err = json.Unmarshal(body, &lresp)
	if err != nil {
		logger.Info(err)
		panic(err)
	}
	logger.Info("token: ", lresp.Data.Token)
}

//带authorization的post请求
func Setup(ip string) {

	l := types2.SetupReq{
		Consensus: "etcdraft",
		PeerPorts: []types2.Peerport{
			types2.Peerport{
				Main:      30031,
				Chaincode: 30032,
			},
		},
		OrdererPorts: []types2.Ordererport{
			types2.Ordererport{
				Main: 30020,
			},
			types2.Ordererport{
				Main: 30021,
			},
			types2.Ordererport{
				Main: 30022,
			},
		},
		AutoGeneratedCerts: true,
	}

	lb, err := json.Marshal(l)

	if err != nil {
		logger.Info(err)
		panic(err)
	}

	req, _ := http.NewRequest("POST", fmt.Sprintf("http://%s:8081/member/setup", ip), bytes.NewBuffer(lb))

	req.Header.Add("authorization", lresp.Data.Token)

	resp, err := http.DefaultClient.Do(req)

	if err != nil {
		logger.Info(err)
		panic(err)
	}
	defer resp.Body.Close()
	body, _ := ioutil.ReadAll(resp.Body)

	logger.Info("res: ", string(body))
}

//带authorization的post请求
func createIdentity(ip string) {

	l := types2.SetupReq{
		Consensus: "etcdraft",
		PeerPorts: []types2.Peerport{
			types2.Peerport{
				Main:      30031,
				Chaincode: 30032,
			},
		},
		OrdererPorts: []types2.Ordererport{
			types2.Ordererport{
				Main: 30020,
			},
		},
		AutoGeneratedCerts: true,
	}

	lb, err := json.Marshal(l)

	if err != nil {
		logger.Info(err)
		panic(err)
	}

	req, _ := http.NewRequest("POST", fmt.Sprintf("http://%s:8081/member/id", ip), bytes.NewBuffer(lb))

	req.Header.Add("authorization", lresp.Data.Token)

	resp, err := http.DefaultClient.Do(req)

	if err != nil {
		logger.Info(err)
		panic(err)
	}
	defer resp.Body.Close()
	body, _ := ioutil.ReadAll(resp.Body)

	logger.Info("res: ", string(body))
}

//带authorization的get请求
func createInvite(inviter, invitee, ip string) {
	req, _ := http.NewRequest("GET", fmt.Sprintf("http://%s:8081/member/invitation/start?inviter="+inviter+"&invitee="+invitee, ip), &bytes.Buffer{})
	req.Header.Add("authorization", lresp.Data.Token)

	resp, err := http.DefaultClient.Do(req)

	if err != nil {
		logger.Info(err)
		panic(err)
	}
	defer resp.Body.Close()
	body, _ := ioutil.ReadAll(resp.Body)

	logger.Info("res: ", string(body))
}

//带authorization的post请求
func getInformList(ip string) error {

	l := types2.PageReq{
		Offset: 0,
		Limit:  10,
	}

	lb, err := json.Marshal(l)

	if err != nil {
		logger.Info(err)

		return err
	}

	req, _ := http.NewRequest("POST", fmt.Sprintf("http://%s:8081/inform/getinformlist", ip), bytes.NewBuffer(lb))

	req.Header.Add("authorization", lresp.Data.Token)

	resp, err := http.DefaultClient.Do(req)

	if err != nil {
		logger.Info(err)

		return err
	}
	defer resp.Body.Close()
	body, _ := ioutil.ReadAll(resp.Body)

	err = json.Unmarshal(body, &informResp)
	if err != nil {
		logger.Info(err)
		panic(err)
		return err
	}
	if len(informResp.Message) == 0 {

		return fmt.Errorf("no message")
	}
	return nil
}

//带authorization的post请求
func operateInform(ip string) {

	l := types2.OperateReq{
		OperateType: "agree",
		InformId:    informResp.Message[0].InformId,
	}

	lb, err := json.Marshal(l)

	if err != nil {
		logger.Info(err)
		panic(err)
	}

	req, _ := http.NewRequest("POST", fmt.Sprintf("http://%s:8081/inform/operateinform", ip), bytes.NewBuffer(lb))

	req.Header.Add("authorization", lresp.Data.Token)

	resp, err := http.DefaultClient.Do(req)

	if err != nil {
		logger.Info(err)
		panic(err)
	}
	defer resp.Body.Close()
	body, _ := ioutil.ReadAll(resp.Body)

	logger.Info("res: ", string(body))
}

//带authorization的get请求
func getMemberIC(ip string) {
	req, _ := http.NewRequest("GET", fmt.Sprintf("http://%s:8081/member/ic", ip), &bytes.Buffer{})
	req.Header.Add("authorization", lresp.Data.Token)

	resp, err := http.DefaultClient.Do(req)

	if err != nil {
		logger.Info(err)
		panic(err)
	}
	defer resp.Body.Close()
	body, _ := ioutil.ReadAll(resp.Body)
	inviteCode = body
	logger.Info("res: ", string(body))
}

//带authorization的post请求
func memberJoin(ip string) {

	req, _ := http.NewRequest("POST", fmt.Sprintf("http://%s:8081/member/join", ip), bytes.NewBuffer(inviteCode))

	req.Header.Add("authorization", lresp.Data.Token)

	resp, err := http.DefaultClient.Do(req)

	if err != nil {
		logger.Info(err)
		panic(err)
	}
	defer resp.Body.Close()
	body, _ := ioutil.ReadAll(resp.Body)
	logger.Info("res: ", string(body))
}

//------内网setup-----
func Test_init1(t *testing.T) {
	Login(baas2)
	Setup(baas2)
}


