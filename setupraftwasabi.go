package main

import (
	"encoding/json"
	"bytes"
	"net/http"
	"io/ioutil"
	"fmt"
)

type PeerPorts struct {
	Main      uint32 `json:"main"`
	Chaincode uint32 `json:"chaincode"`
}

type OrdererPorts struct {
	Main  uint32 `json:"main"`
	Debug uint32 `json:"debug"`
}

type SetupRequest struct {
	// 网络名称
	NetworkName string `json:"networkName"`
	// 共识模式
	Consensus string `json:"consensus"`
	// 组织名称
	OrgName string `json:"orgName"`
	// 组织别名
	OrgAlias string `json:"orgAlias"`
	// peer 端口
	PeerPorts []PeerPorts `json:"peerPorts"`
	// orderer 端口
	OrdererPorts []OrdererPorts `json:"ordererPorts"`
	// 公司名称
	Company string `json:"company"`
	// 证书是否自动生成 现在只支持true
	AutoGeneratedCerts bool `json:"autoGeneratedCerts"`
}

const (
	org = "baas4"
	ip = "192.168.9.83"
)

func main() {
	//simpleTest()
	setup()
	//createUserMsp()
	//invoke()
}

func setup()  {
	peers := []PeerPorts{
		PeerPorts{
			Main:      30031,
			Chaincode: 30032,
		},
		PeerPorts{
			Main:      30033,
			Chaincode: 30034,
		},
	}
	orderer0 := OrdererPorts{
		Main: 30020,
	}
	orderer1 := OrdererPorts{
		Main: 30022,
	}
	orderer2 := OrdererPorts{
		Main: 30024,
	}
	SetupRequest := SetupRequest{
		OrgName:      org,
		PeerPorts:    peers,
		OrdererPorts: []OrdererPorts{orderer0, orderer1, orderer2},
		Consensus:    "etcdraft",
	}

	data, err := json.Marshal(SetupRequest)
	if err != nil {
		panic(err)
	}

	wrt := bytes.NewBuffer(data)

	resp, err := http.Post("http://"+ip+":8081/member/setup", "application/json", wrt)

	if err != nil {
		panic(err)
	}
	ret, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		panic(err)
	}
	fmt.Println(string(ret))
}

type CreateIndirectRequest struct {
	Orgname  string `json:"orgname"`
	Username string `json:"username"`
	Password string `json:"password"`
}

func createUserMsp()  {
	cir := CreateIndirectRequest{
		Orgname:"org1",
		Username:"user1",
		Password:"12345678",
	}

	data, err := json.Marshal(cir)
	if err != nil {
		panic(err)
	}

	wrt := bytes.NewBuffer(data)

	resp, err := http.Post("http://"+ip+":8081/indirect/create", "application/json", wrt)

	if err != nil {
		panic(err)
	}
	ret, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		panic(err)
	}
	fmt.Println(string(ret))
}

type IndirectInvokeRequest struct {
	Userid       string
	Org          string //直参机构的org
	ChannelName  string
	CcName       string
	Args         []string
	//PeerNodes    []*ServiceNode
	//OrdererNodes []*ServiceNode
}

func invoke()  {

	iir := IndirectInvokeRequest{
		Userid:"b2c8c090-413e-4433-a5cc-941f62ec1ae7",
		Org:"org444",
		ChannelName:"channel1",
		CcName:"example1",
		Args:[]string{},
	}

	data, err := json.Marshal(iir)
	if err != nil {
		panic(err)
	}

	wrt := bytes.NewBuffer(data)

	resp, err := http.Post("http://"+ip+":8081/indirect/invoke", "application/json", wrt)

	if err != nil {
		panic(err)
	}
	ret, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		panic(err)
	}
	fmt.Println(string(ret))
}